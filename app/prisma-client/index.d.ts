// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  accountType: (where?: AccountTypeWhereInput) => Promise<boolean>;
  chatRoom: (where?: ChatRoomWhereInput) => Promise<boolean>;
  messageContent: (where?: MessageContentWhereInput) => Promise<boolean>;
  permission: (where?: PermissionWhereInput) => Promise<boolean>;
  specialization: (where?: SpecializationWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  accountType: (
    where: AccountTypeWhereUniqueInput
  ) => AccountTypeNullablePromise;
  accountTypes: (args?: {
    where?: AccountTypeWhereInput;
    orderBy?: AccountTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AccountType>;
  accountTypesConnection: (args?: {
    where?: AccountTypeWhereInput;
    orderBy?: AccountTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AccountTypeConnectionPromise;
  chatRoom: (where: ChatRoomWhereUniqueInput) => ChatRoomNullablePromise;
  chatRooms: (args?: {
    where?: ChatRoomWhereInput;
    orderBy?: ChatRoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChatRoom>;
  chatRoomsConnection: (args?: {
    where?: ChatRoomWhereInput;
    orderBy?: ChatRoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChatRoomConnectionPromise;
  messageContent: (
    where: MessageContentWhereUniqueInput
  ) => MessageContentNullablePromise;
  messageContents: (args?: {
    where?: MessageContentWhereInput;
    orderBy?: MessageContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<MessageContent>;
  messageContentsConnection: (args?: {
    where?: MessageContentWhereInput;
    orderBy?: MessageContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageContentConnectionPromise;
  permission: (where: PermissionWhereUniqueInput) => PermissionNullablePromise;
  permissions: (args?: {
    where?: PermissionWhereInput;
    orderBy?: PermissionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Permission>;
  permissionsConnection: (args?: {
    where?: PermissionWhereInput;
    orderBy?: PermissionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PermissionConnectionPromise;
  specialization: (
    where: SpecializationWhereUniqueInput
  ) => SpecializationNullablePromise;
  specializations: (args?: {
    where?: SpecializationWhereInput;
    orderBy?: SpecializationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Specialization>;
  specializationsConnection: (args?: {
    where?: SpecializationWhereInput;
    orderBy?: SpecializationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SpecializationConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAccountType: (data: AccountTypeCreateInput) => AccountTypePromise;
  updateAccountType: (args: {
    data: AccountTypeUpdateInput;
    where: AccountTypeWhereUniqueInput;
  }) => AccountTypePromise;
  updateManyAccountTypes: (args: {
    data: AccountTypeUpdateManyMutationInput;
    where?: AccountTypeWhereInput;
  }) => BatchPayloadPromise;
  upsertAccountType: (args: {
    where: AccountTypeWhereUniqueInput;
    create: AccountTypeCreateInput;
    update: AccountTypeUpdateInput;
  }) => AccountTypePromise;
  deleteAccountType: (where: AccountTypeWhereUniqueInput) => AccountTypePromise;
  deleteManyAccountTypes: (
    where?: AccountTypeWhereInput
  ) => BatchPayloadPromise;
  createChatRoom: (data: ChatRoomCreateInput) => ChatRoomPromise;
  updateChatRoom: (args: {
    data: ChatRoomUpdateInput;
    where: ChatRoomWhereUniqueInput;
  }) => ChatRoomPromise;
  upsertChatRoom: (args: {
    where: ChatRoomWhereUniqueInput;
    create: ChatRoomCreateInput;
    update: ChatRoomUpdateInput;
  }) => ChatRoomPromise;
  deleteChatRoom: (where: ChatRoomWhereUniqueInput) => ChatRoomPromise;
  deleteManyChatRooms: (where?: ChatRoomWhereInput) => BatchPayloadPromise;
  createMessageContent: (
    data: MessageContentCreateInput
  ) => MessageContentPromise;
  updateMessageContent: (args: {
    data: MessageContentUpdateInput;
    where: MessageContentWhereUniqueInput;
  }) => MessageContentPromise;
  updateManyMessageContents: (args: {
    data: MessageContentUpdateManyMutationInput;
    where?: MessageContentWhereInput;
  }) => BatchPayloadPromise;
  upsertMessageContent: (args: {
    where: MessageContentWhereUniqueInput;
    create: MessageContentCreateInput;
    update: MessageContentUpdateInput;
  }) => MessageContentPromise;
  deleteMessageContent: (
    where: MessageContentWhereUniqueInput
  ) => MessageContentPromise;
  deleteManyMessageContents: (
    where?: MessageContentWhereInput
  ) => BatchPayloadPromise;
  createPermission: (data: PermissionCreateInput) => PermissionPromise;
  updatePermission: (args: {
    data: PermissionUpdateInput;
    where: PermissionWhereUniqueInput;
  }) => PermissionPromise;
  updateManyPermissions: (args: {
    data: PermissionUpdateManyMutationInput;
    where?: PermissionWhereInput;
  }) => BatchPayloadPromise;
  upsertPermission: (args: {
    where: PermissionWhereUniqueInput;
    create: PermissionCreateInput;
    update: PermissionUpdateInput;
  }) => PermissionPromise;
  deletePermission: (where: PermissionWhereUniqueInput) => PermissionPromise;
  deleteManyPermissions: (where?: PermissionWhereInput) => BatchPayloadPromise;
  createSpecialization: (
    data: SpecializationCreateInput
  ) => SpecializationPromise;
  updateSpecialization: (args: {
    data: SpecializationUpdateInput;
    where: SpecializationWhereUniqueInput;
  }) => SpecializationPromise;
  updateManySpecializations: (args: {
    data: SpecializationUpdateManyMutationInput;
    where?: SpecializationWhereInput;
  }) => BatchPayloadPromise;
  upsertSpecialization: (args: {
    where: SpecializationWhereUniqueInput;
    create: SpecializationCreateInput;
    update: SpecializationUpdateInput;
  }) => SpecializationPromise;
  deleteSpecialization: (
    where: SpecializationWhereUniqueInput
  ) => SpecializationPromise;
  deleteManySpecializations: (
    where?: SpecializationWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  accountType: (
    where?: AccountTypeSubscriptionWhereInput
  ) => AccountTypeSubscriptionPayloadSubscription;
  chatRoom: (
    where?: ChatRoomSubscriptionWhereInput
  ) => ChatRoomSubscriptionPayloadSubscription;
  messageContent: (
    where?: MessageContentSubscriptionWhereInput
  ) => MessageContentSubscriptionPayloadSubscription;
  permission: (
    where?: PermissionSubscriptionWhereInput
  ) => PermissionSubscriptionPayloadSubscription;
  specialization: (
    where?: SpecializationSubscriptionWhereInput
  ) => SpecializationSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firebase_id_ASC"
  | "firebase_id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "photoURL_ASC"
  | "photoURL_DESC"
  | "verified_ASC"
  | "verified_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ChatRoomOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MessageContentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PermissionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "key_ASC"
  | "key_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AccountTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SpecializationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface AccountTypeUpdateOneRequiredWithoutUsersInput {
  create?: Maybe<AccountTypeCreateWithoutUsersInput>;
  update?: Maybe<AccountTypeUpdateWithoutUsersDataInput>;
  upsert?: Maybe<AccountTypeUpsertWithoutUsersInput>;
  connect?: Maybe<AccountTypeWhereUniqueInput>;
}

export type AccountTypeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PermissionUpdateDataInput {
  name?: Maybe<String>;
  key?: Maybe<String>;
}

export interface SpecializationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SpecializationWhereInput[] | SpecializationWhereInput>;
  OR?: Maybe<SpecializationWhereInput[] | SpecializationWhereInput>;
  NOT?: Maybe<SpecializationWhereInput[] | SpecializationWhereInput>;
}

export interface PermissionUpsertWithWhereUniqueNestedInput {
  where: PermissionWhereUniqueInput;
  update: PermissionUpdateDataInput;
  create: PermissionCreateInput;
}

export interface MessageContentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sender?: Maybe<UserWhereInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  chatRoom?: Maybe<ChatRoomWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageContentWhereInput[] | MessageContentWhereInput>;
  OR?: Maybe<MessageContentWhereInput[] | MessageContentWhereInput>;
  NOT?: Maybe<MessageContentWhereInput[] | MessageContentWhereInput>;
}

export interface ChatRoomCreateWithoutRecipientsInput {
  id?: Maybe<ID_Input>;
  content?: Maybe<MessageContentCreateManyWithoutChatRoomInput>;
}

export interface AccountTypeUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface MessageContentCreateManyWithoutChatRoomInput {
  create?: Maybe<
    | MessageContentCreateWithoutChatRoomInput[]
    | MessageContentCreateWithoutChatRoomInput
  >;
  connect?: Maybe<
    MessageContentWhereUniqueInput[] | MessageContentWhereUniqueInput
  >;
}

export interface PermissionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  key?: Maybe<String>;
  key_not?: Maybe<String>;
  key_in?: Maybe<String[] | String>;
  key_not_in?: Maybe<String[] | String>;
  key_lt?: Maybe<String>;
  key_lte?: Maybe<String>;
  key_gt?: Maybe<String>;
  key_gte?: Maybe<String>;
  key_contains?: Maybe<String>;
  key_not_contains?: Maybe<String>;
  key_starts_with?: Maybe<String>;
  key_not_starts_with?: Maybe<String>;
  key_ends_with?: Maybe<String>;
  key_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PermissionScalarWhereInput[] | PermissionScalarWhereInput>;
  OR?: Maybe<PermissionScalarWhereInput[] | PermissionScalarWhereInput>;
  NOT?: Maybe<PermissionScalarWhereInput[] | PermissionScalarWhereInput>;
}

export interface MessageContentCreateWithoutChatRoomInput {
  id?: Maybe<ID_Input>;
  sender: UserCreateOneInput;
  text: String;
}

export interface SpecializationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SpecializationWhereInput>;
  AND?: Maybe<
    | SpecializationSubscriptionWhereInput[]
    | SpecializationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | SpecializationSubscriptionWhereInput[]
    | SpecializationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | SpecializationSubscriptionWhereInput[]
    | SpecializationSubscriptionWhereInput
  >;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PermissionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  key?: Maybe<String>;
  key_not?: Maybe<String>;
  key_in?: Maybe<String[] | String>;
  key_not_in?: Maybe<String[] | String>;
  key_lt?: Maybe<String>;
  key_lte?: Maybe<String>;
  key_gt?: Maybe<String>;
  key_gte?: Maybe<String>;
  key_contains?: Maybe<String>;
  key_not_contains?: Maybe<String>;
  key_starts_with?: Maybe<String>;
  key_not_starts_with?: Maybe<String>;
  key_ends_with?: Maybe<String>;
  key_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PermissionWhereInput[] | PermissionWhereInput>;
  OR?: Maybe<PermissionWhereInput[] | PermissionWhereInput>;
  NOT?: Maybe<PermissionWhereInput[] | PermissionWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firebase_id: String;
  name: String;
  phone: String;
  gender: String;
  photoURL?: Maybe<String>;
  account_type: AccountTypeCreateOneWithoutUsersInput;
  verified?: Maybe<Boolean>;
  specialization?: Maybe<SpecializationCreateOneInput>;
  doctors?: Maybe<UserCreateManyWithoutDoctorsInput>;
  patients?: Maybe<UserCreateManyWithoutPatientsInput>;
  chatRooms?: Maybe<ChatRoomCreateManyWithoutRecipientsInput>;
}

export interface AccountTypeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  permissions_every?: Maybe<PermissionWhereInput>;
  permissions_some?: Maybe<PermissionWhereInput>;
  permissions_none?: Maybe<PermissionWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AccountTypeWhereInput[] | AccountTypeWhereInput>;
  OR?: Maybe<AccountTypeWhereInput[] | AccountTypeWhereInput>;
  NOT?: Maybe<AccountTypeWhereInput[] | AccountTypeWhereInput>;
}

export interface AccountTypeUpdateInput {
  name?: Maybe<String>;
  users?: Maybe<UserUpdateManyWithoutAccount_typeInput>;
  permissions?: Maybe<PermissionUpdateManyInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firebase_id?: Maybe<String>;
  firebase_id_not?: Maybe<String>;
  firebase_id_in?: Maybe<String[] | String>;
  firebase_id_not_in?: Maybe<String[] | String>;
  firebase_id_lt?: Maybe<String>;
  firebase_id_lte?: Maybe<String>;
  firebase_id_gt?: Maybe<String>;
  firebase_id_gte?: Maybe<String>;
  firebase_id_contains?: Maybe<String>;
  firebase_id_not_contains?: Maybe<String>;
  firebase_id_starts_with?: Maybe<String>;
  firebase_id_not_starts_with?: Maybe<String>;
  firebase_id_ends_with?: Maybe<String>;
  firebase_id_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  photoURL?: Maybe<String>;
  photoURL_not?: Maybe<String>;
  photoURL_in?: Maybe<String[] | String>;
  photoURL_not_in?: Maybe<String[] | String>;
  photoURL_lt?: Maybe<String>;
  photoURL_lte?: Maybe<String>;
  photoURL_gt?: Maybe<String>;
  photoURL_gte?: Maybe<String>;
  photoURL_contains?: Maybe<String>;
  photoURL_not_contains?: Maybe<String>;
  photoURL_starts_with?: Maybe<String>;
  photoURL_not_starts_with?: Maybe<String>;
  photoURL_ends_with?: Maybe<String>;
  photoURL_not_ends_with?: Maybe<String>;
  account_type?: Maybe<AccountTypeWhereInput>;
  verified?: Maybe<Boolean>;
  verified_not?: Maybe<Boolean>;
  specialization?: Maybe<SpecializationWhereInput>;
  doctors_every?: Maybe<UserWhereInput>;
  doctors_some?: Maybe<UserWhereInput>;
  doctors_none?: Maybe<UserWhereInput>;
  patients_every?: Maybe<UserWhereInput>;
  patients_some?: Maybe<UserWhereInput>;
  patients_none?: Maybe<UserWhereInput>;
  chatRooms_every?: Maybe<ChatRoomWhereInput>;
  chatRooms_some?: Maybe<ChatRoomWhereInput>;
  chatRooms_none?: Maybe<ChatRoomWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserUpdateManyWithoutAccount_typeInput {
  create?: Maybe<
    UserCreateWithoutAccount_typeInput[] | UserCreateWithoutAccount_typeInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutAccount_typeInput[]
    | UserUpdateWithWhereUniqueWithoutAccount_typeInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutAccount_typeInput[]
    | UserUpsertWithWhereUniqueWithoutAccount_typeInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateManyMutationInput {
  firebase_id?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  gender?: Maybe<String>;
  photoURL?: Maybe<String>;
  verified?: Maybe<Boolean>;
}

export interface UserUpdateWithWhereUniqueWithoutAccount_typeInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutAccount_typeDataInput;
}

export interface SpecializationUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserUpdateWithoutAccount_typeDataInput {
  firebase_id?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  gender?: Maybe<String>;
  photoURL?: Maybe<String>;
  verified?: Maybe<Boolean>;
  specialization?: Maybe<SpecializationUpdateOneInput>;
  doctors?: Maybe<UserUpdateManyWithoutDoctorsInput>;
  patients?: Maybe<UserUpdateManyWithoutPatientsInput>;
  chatRooms?: Maybe<ChatRoomUpdateManyWithoutRecipientsInput>;
}

export interface SpecializationUpdateInput {
  name?: Maybe<String>;
}

export interface SpecializationUpdateOneInput {
  create?: Maybe<SpecializationCreateInput>;
  update?: Maybe<SpecializationUpdateDataInput>;
  upsert?: Maybe<SpecializationUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SpecializationWhereUniqueInput>;
}

export interface PermissionUpdateInput {
  name?: Maybe<String>;
  key?: Maybe<String>;
}

export interface SpecializationUpdateDataInput {
  name?: Maybe<String>;
}

export interface MessageContentUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface SpecializationUpsertNestedInput {
  update: SpecializationUpdateDataInput;
  create: SpecializationCreateInput;
}

export interface ChatRoomUpdateWithoutContentDataInput {
  recipients?: Maybe<UserUpdateManyWithoutChatRoomsInput>;
}

export interface UserUpdateManyWithoutDoctorsInput {
  create?: Maybe<
    UserCreateWithoutDoctorsInput[] | UserCreateWithoutDoctorsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutDoctorsInput[]
    | UserUpdateWithWhereUniqueWithoutDoctorsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutDoctorsInput[]
    | UserUpsertWithWhereUniqueWithoutDoctorsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface ChatRoomUpdateOneRequiredWithoutContentInput {
  create?: Maybe<ChatRoomCreateWithoutContentInput>;
  update?: Maybe<ChatRoomUpdateWithoutContentDataInput>;
  upsert?: Maybe<ChatRoomUpsertWithoutContentInput>;
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface UserUpdateWithWhereUniqueWithoutDoctorsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutDoctorsDataInput;
}

export interface ChatRoomCreateWithoutContentInput {
  id?: Maybe<ID_Input>;
  recipients?: Maybe<UserCreateManyWithoutChatRoomsInput>;
}

export interface UserUpdateWithoutDoctorsDataInput {
  firebase_id?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  gender?: Maybe<String>;
  photoURL?: Maybe<String>;
  account_type?: Maybe<AccountTypeUpdateOneRequiredWithoutUsersInput>;
  verified?: Maybe<Boolean>;
  specialization?: Maybe<SpecializationUpdateOneInput>;
  patients?: Maybe<UserUpdateManyWithoutPatientsInput>;
  chatRooms?: Maybe<ChatRoomUpdateManyWithoutRecipientsInput>;
}

export interface ChatRoomCreateOneWithoutContentInput {
  create?: Maybe<ChatRoomCreateWithoutContentInput>;
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface UserCreateWithoutChatRoomsInput {
  id?: Maybe<ID_Input>;
  firebase_id: String;
  name: String;
  phone: String;
  gender: String;
  photoURL?: Maybe<String>;
  account_type: AccountTypeCreateOneWithoutUsersInput;
  verified?: Maybe<Boolean>;
  specialization?: Maybe<SpecializationCreateOneInput>;
  doctors?: Maybe<UserCreateManyWithoutDoctorsInput>;
  patients?: Maybe<UserCreateManyWithoutPatientsInput>;
}

export interface UserUpsertWithWhereUniqueWithoutChatRoomsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutChatRoomsDataInput;
  create: UserCreateWithoutChatRoomsInput;
}

export interface AccountTypeUpdateWithoutUsersDataInput {
  name?: Maybe<String>;
  permissions?: Maybe<PermissionUpdateManyInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  firebase_id?: Maybe<String>;
}>;

export interface PermissionUpdateManyInput {
  create?: Maybe<PermissionCreateInput[] | PermissionCreateInput>;
  update?: Maybe<
    | PermissionUpdateWithWhereUniqueNestedInput[]
    | PermissionUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PermissionUpsertWithWhereUniqueNestedInput[]
    | PermissionUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<PermissionWhereUniqueInput[] | PermissionWhereUniqueInput>;
  connect?: Maybe<PermissionWhereUniqueInput[] | PermissionWhereUniqueInput>;
  set?: Maybe<PermissionWhereUniqueInput[] | PermissionWhereUniqueInput>;
  disconnect?: Maybe<PermissionWhereUniqueInput[] | PermissionWhereUniqueInput>;
  deleteMany?: Maybe<PermissionScalarWhereInput[] | PermissionScalarWhereInput>;
  updateMany?: Maybe<
    | PermissionUpdateManyWithWhereNestedInput[]
    | PermissionUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateManyWithoutChatRoomsInput {
  create?: Maybe<
    UserCreateWithoutChatRoomsInput[] | UserCreateWithoutChatRoomsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutChatRoomsInput[]
    | UserUpdateWithWhereUniqueWithoutChatRoomsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutChatRoomsInput[]
    | UserUpsertWithWhereUniqueWithoutChatRoomsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface PermissionUpdateWithWhereUniqueNestedInput {
  where: PermissionWhereUniqueInput;
  data: PermissionUpdateDataInput;
}

export interface UserCreateManyWithoutAccount_typeInput {
  create?: Maybe<
    UserCreateWithoutAccount_typeInput[] | UserCreateWithoutAccount_typeInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface ChatRoomWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  recipients_every?: Maybe<UserWhereInput>;
  recipients_some?: Maybe<UserWhereInput>;
  recipients_none?: Maybe<UserWhereInput>;
  content_every?: Maybe<MessageContentWhereInput>;
  content_some?: Maybe<MessageContentWhereInput>;
  content_none?: Maybe<MessageContentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ChatRoomWhereInput[] | ChatRoomWhereInput>;
  OR?: Maybe<ChatRoomWhereInput[] | ChatRoomWhereInput>;
  NOT?: Maybe<ChatRoomWhereInput[] | ChatRoomWhereInput>;
}

export interface SpecializationCreateOneInput {
  create?: Maybe<SpecializationCreateInput>;
  connect?: Maybe<SpecializationWhereUniqueInput>;
}

export interface UserCreateManyWithoutChatRoomsInput {
  create?: Maybe<
    UserCreateWithoutChatRoomsInput[] | UserCreateWithoutChatRoomsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateManyWithoutDoctorsInput {
  create?: Maybe<
    UserCreateWithoutDoctorsInput[] | UserCreateWithoutDoctorsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface ChatRoomCreateInput {
  id?: Maybe<ID_Input>;
  recipients?: Maybe<UserCreateManyWithoutChatRoomsInput>;
  content?: Maybe<MessageContentCreateManyWithoutChatRoomInput>;
}

export interface AccountTypeCreateOneWithoutUsersInput {
  create?: Maybe<AccountTypeCreateWithoutUsersInput>;
  connect?: Maybe<AccountTypeWhereUniqueInput>;
}

export interface PermissionUpdateManyWithWhereNestedInput {
  where: PermissionScalarWhereInput;
  data: PermissionUpdateManyDataInput;
}

export interface PermissionCreateManyInput {
  create?: Maybe<PermissionCreateInput[] | PermissionCreateInput>;
  connect?: Maybe<PermissionWhereUniqueInput[] | PermissionWhereUniqueInput>;
}

export interface PermissionUpdateManyDataInput {
  name?: Maybe<String>;
  key?: Maybe<String>;
}

export interface UserCreateManyWithoutPatientsInput {
  create?: Maybe<
    UserCreateWithoutPatientsInput[] | UserCreateWithoutPatientsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface AccountTypeUpsertWithoutUsersInput {
  update: AccountTypeUpdateWithoutUsersDataInput;
  create: AccountTypeCreateWithoutUsersInput;
}

export interface ChatRoomCreateManyWithoutRecipientsInput {
  create?: Maybe<
    | ChatRoomCreateWithoutRecipientsInput[]
    | ChatRoomCreateWithoutRecipientsInput
  >;
  connect?: Maybe<ChatRoomWhereUniqueInput[] | ChatRoomWhereUniqueInput>;
}

export interface UserUpdateManyWithoutPatientsInput {
  create?: Maybe<
    UserCreateWithoutPatientsInput[] | UserCreateWithoutPatientsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutPatientsInput[]
    | UserUpdateWithWhereUniqueWithoutPatientsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutPatientsInput[]
    | UserUpsertWithWhereUniqueWithoutPatientsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface PermissionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PermissionWhereInput>;
  AND?: Maybe<
    PermissionSubscriptionWhereInput[] | PermissionSubscriptionWhereInput
  >;
  OR?: Maybe<
    PermissionSubscriptionWhereInput[] | PermissionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PermissionSubscriptionWhereInput[] | PermissionSubscriptionWhereInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutPatientsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutPatientsDataInput;
}

export interface ChatRoomSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChatRoomWhereInput>;
  AND?: Maybe<
    ChatRoomSubscriptionWhereInput[] | ChatRoomSubscriptionWhereInput
  >;
  OR?: Maybe<ChatRoomSubscriptionWhereInput[] | ChatRoomSubscriptionWhereInput>;
  NOT?: Maybe<
    ChatRoomSubscriptionWhereInput[] | ChatRoomSubscriptionWhereInput
  >;
}

export interface UserUpdateWithoutPatientsDataInput {
  firebase_id?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  gender?: Maybe<String>;
  photoURL?: Maybe<String>;
  account_type?: Maybe<AccountTypeUpdateOneRequiredWithoutUsersInput>;
  verified?: Maybe<Boolean>;
  specialization?: Maybe<SpecializationUpdateOneInput>;
  doctors?: Maybe<UserUpdateManyWithoutDoctorsInput>;
  chatRooms?: Maybe<ChatRoomUpdateManyWithoutRecipientsInput>;
}

export interface UserUpdateInput {
  firebase_id?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  gender?: Maybe<String>;
  photoURL?: Maybe<String>;
  account_type?: Maybe<AccountTypeUpdateOneRequiredWithoutUsersInput>;
  verified?: Maybe<Boolean>;
  specialization?: Maybe<SpecializationUpdateOneInput>;
  doctors?: Maybe<UserUpdateManyWithoutDoctorsInput>;
  patients?: Maybe<UserUpdateManyWithoutPatientsInput>;
  chatRooms?: Maybe<ChatRoomUpdateManyWithoutRecipientsInput>;
}

export interface ChatRoomUpdateManyWithoutRecipientsInput {
  create?: Maybe<
    | ChatRoomCreateWithoutRecipientsInput[]
    | ChatRoomCreateWithoutRecipientsInput
  >;
  delete?: Maybe<ChatRoomWhereUniqueInput[] | ChatRoomWhereUniqueInput>;
  connect?: Maybe<ChatRoomWhereUniqueInput[] | ChatRoomWhereUniqueInput>;
  set?: Maybe<ChatRoomWhereUniqueInput[] | ChatRoomWhereUniqueInput>;
  disconnect?: Maybe<ChatRoomWhereUniqueInput[] | ChatRoomWhereUniqueInput>;
  update?: Maybe<
    | ChatRoomUpdateWithWhereUniqueWithoutRecipientsInput[]
    | ChatRoomUpdateWithWhereUniqueWithoutRecipientsInput
  >;
  upsert?: Maybe<
    | ChatRoomUpsertWithWhereUniqueWithoutRecipientsInput[]
    | ChatRoomUpsertWithWhereUniqueWithoutRecipientsInput
  >;
  deleteMany?: Maybe<ChatRoomScalarWhereInput[] | ChatRoomScalarWhereInput>;
}

export interface PermissionUpdateManyMutationInput {
  name?: Maybe<String>;
  key?: Maybe<String>;
}

export interface ChatRoomUpdateWithWhereUniqueWithoutRecipientsInput {
  where: ChatRoomWhereUniqueInput;
  data: ChatRoomUpdateWithoutRecipientsDataInput;
}

export interface ChatRoomUpsertWithoutContentInput {
  update: ChatRoomUpdateWithoutContentDataInput;
  create: ChatRoomCreateWithoutContentInput;
}

export interface ChatRoomUpdateWithoutRecipientsDataInput {
  content?: Maybe<MessageContentUpdateManyWithoutChatRoomInput>;
}

export interface MessageContentUpdateInput {
  sender?: Maybe<UserUpdateOneRequiredInput>;
  text?: Maybe<String>;
  chatRoom?: Maybe<ChatRoomUpdateOneRequiredWithoutContentInput>;
}

export interface MessageContentUpdateManyWithoutChatRoomInput {
  create?: Maybe<
    | MessageContentCreateWithoutChatRoomInput[]
    | MessageContentCreateWithoutChatRoomInput
  >;
  delete?: Maybe<
    MessageContentWhereUniqueInput[] | MessageContentWhereUniqueInput
  >;
  connect?: Maybe<
    MessageContentWhereUniqueInput[] | MessageContentWhereUniqueInput
  >;
  set?: Maybe<
    MessageContentWhereUniqueInput[] | MessageContentWhereUniqueInput
  >;
  disconnect?: Maybe<
    MessageContentWhereUniqueInput[] | MessageContentWhereUniqueInput
  >;
  update?: Maybe<
    | MessageContentUpdateWithWhereUniqueWithoutChatRoomInput[]
    | MessageContentUpdateWithWhereUniqueWithoutChatRoomInput
  >;
  upsert?: Maybe<
    | MessageContentUpsertWithWhereUniqueWithoutChatRoomInput[]
    | MessageContentUpsertWithWhereUniqueWithoutChatRoomInput
  >;
  deleteMany?: Maybe<
    MessageContentScalarWhereInput[] | MessageContentScalarWhereInput
  >;
  updateMany?: Maybe<
    | MessageContentUpdateManyWithWhereNestedInput[]
    | MessageContentUpdateManyWithWhereNestedInput
  >;
}

export interface MessageContentCreateInput {
  id?: Maybe<ID_Input>;
  sender: UserCreateOneInput;
  text: String;
  chatRoom: ChatRoomCreateOneWithoutContentInput;
}

export interface MessageContentUpdateWithWhereUniqueWithoutChatRoomInput {
  where: MessageContentWhereUniqueInput;
  data: MessageContentUpdateWithoutChatRoomDataInput;
}

export interface UserUpdateWithWhereUniqueWithoutChatRoomsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutChatRoomsDataInput;
}

export interface MessageContentUpdateWithoutChatRoomDataInput {
  sender?: Maybe<UserUpdateOneRequiredInput>;
  text?: Maybe<String>;
}

export interface AccountTypeCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  users?: Maybe<UserCreateManyWithoutAccount_typeInput>;
  permissions?: Maybe<PermissionCreateManyInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface SpecializationCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface UserUpdateDataInput {
  firebase_id?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  gender?: Maybe<String>;
  photoURL?: Maybe<String>;
  account_type?: Maybe<AccountTypeUpdateOneRequiredWithoutUsersInput>;
  verified?: Maybe<Boolean>;
  specialization?: Maybe<SpecializationUpdateOneInput>;
  doctors?: Maybe<UserUpdateManyWithoutDoctorsInput>;
  patients?: Maybe<UserUpdateManyWithoutPatientsInput>;
  chatRooms?: Maybe<ChatRoomUpdateManyWithoutRecipientsInput>;
}

export interface AccountTypeCreateWithoutUsersInput {
  id?: Maybe<ID_Input>;
  name: String;
  permissions?: Maybe<PermissionCreateManyInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserCreateWithoutPatientsInput {
  id?: Maybe<ID_Input>;
  firebase_id: String;
  name: String;
  phone: String;
  gender: String;
  photoURL?: Maybe<String>;
  account_type: AccountTypeCreateOneWithoutUsersInput;
  verified?: Maybe<Boolean>;
  specialization?: Maybe<SpecializationCreateOneInput>;
  doctors?: Maybe<UserCreateManyWithoutDoctorsInput>;
  chatRooms?: Maybe<ChatRoomCreateManyWithoutRecipientsInput>;
}

export interface MessageContentUpsertWithWhereUniqueWithoutChatRoomInput {
  where: MessageContentWhereUniqueInput;
  update: MessageContentUpdateWithoutChatRoomDataInput;
  create: MessageContentCreateWithoutChatRoomInput;
}

export interface MessageContentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageContentWhereInput>;
  AND?: Maybe<
    | MessageContentSubscriptionWhereInput[]
    | MessageContentSubscriptionWhereInput
  >;
  OR?: Maybe<
    | MessageContentSubscriptionWhereInput[]
    | MessageContentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | MessageContentSubscriptionWhereInput[]
    | MessageContentSubscriptionWhereInput
  >;
}

export interface MessageContentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    MessageContentScalarWhereInput[] | MessageContentScalarWhereInput
  >;
  OR?: Maybe<MessageContentScalarWhereInput[] | MessageContentScalarWhereInput>;
  NOT?: Maybe<
    MessageContentScalarWhereInput[] | MessageContentScalarWhereInput
  >;
}

export type ChatRoomWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MessageContentUpdateManyWithWhereNestedInput {
  where: MessageContentScalarWhereInput;
  data: MessageContentUpdateManyDataInput;
}

export type PermissionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  key?: Maybe<String>;
}>;

export interface MessageContentUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface UserUpdateWithoutChatRoomsDataInput {
  firebase_id?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  gender?: Maybe<String>;
  photoURL?: Maybe<String>;
  account_type?: Maybe<AccountTypeUpdateOneRequiredWithoutUsersInput>;
  verified?: Maybe<Boolean>;
  specialization?: Maybe<SpecializationUpdateOneInput>;
  doctors?: Maybe<UserUpdateManyWithoutDoctorsInput>;
  patients?: Maybe<UserUpdateManyWithoutPatientsInput>;
}

export interface ChatRoomUpsertWithWhereUniqueWithoutRecipientsInput {
  where: ChatRoomWhereUniqueInput;
  update: ChatRoomUpdateWithoutRecipientsDataInput;
  create: ChatRoomCreateWithoutRecipientsInput;
}

export interface UserCreateWithoutAccount_typeInput {
  id?: Maybe<ID_Input>;
  firebase_id: String;
  name: String;
  phone: String;
  gender: String;
  photoURL?: Maybe<String>;
  verified?: Maybe<Boolean>;
  specialization?: Maybe<SpecializationCreateOneInput>;
  doctors?: Maybe<UserCreateManyWithoutDoctorsInput>;
  patients?: Maybe<UserCreateManyWithoutPatientsInput>;
  chatRooms?: Maybe<ChatRoomCreateManyWithoutRecipientsInput>;
}

export interface ChatRoomScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ChatRoomScalarWhereInput[] | ChatRoomScalarWhereInput>;
  OR?: Maybe<ChatRoomScalarWhereInput[] | ChatRoomScalarWhereInput>;
  NOT?: Maybe<ChatRoomScalarWhereInput[] | ChatRoomScalarWhereInput>;
}

export interface PermissionCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  key: String;
}

export interface UserUpsertWithWhereUniqueWithoutPatientsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutPatientsDataInput;
  create: UserCreateWithoutPatientsInput;
}

export interface AccountTypeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AccountTypeWhereInput>;
  AND?: Maybe<
    AccountTypeSubscriptionWhereInput[] | AccountTypeSubscriptionWhereInput
  >;
  OR?: Maybe<
    AccountTypeSubscriptionWhereInput[] | AccountTypeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AccountTypeSubscriptionWhereInput[] | AccountTypeSubscriptionWhereInput
  >;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firebase_id?: Maybe<String>;
  firebase_id_not?: Maybe<String>;
  firebase_id_in?: Maybe<String[] | String>;
  firebase_id_not_in?: Maybe<String[] | String>;
  firebase_id_lt?: Maybe<String>;
  firebase_id_lte?: Maybe<String>;
  firebase_id_gt?: Maybe<String>;
  firebase_id_gte?: Maybe<String>;
  firebase_id_contains?: Maybe<String>;
  firebase_id_not_contains?: Maybe<String>;
  firebase_id_starts_with?: Maybe<String>;
  firebase_id_not_starts_with?: Maybe<String>;
  firebase_id_ends_with?: Maybe<String>;
  firebase_id_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  photoURL?: Maybe<String>;
  photoURL_not?: Maybe<String>;
  photoURL_in?: Maybe<String[] | String>;
  photoURL_not_in?: Maybe<String[] | String>;
  photoURL_lt?: Maybe<String>;
  photoURL_lte?: Maybe<String>;
  photoURL_gt?: Maybe<String>;
  photoURL_gte?: Maybe<String>;
  photoURL_contains?: Maybe<String>;
  photoURL_not_contains?: Maybe<String>;
  photoURL_starts_with?: Maybe<String>;
  photoURL_not_starts_with?: Maybe<String>;
  photoURL_ends_with?: Maybe<String>;
  photoURL_not_ends_with?: Maybe<String>;
  verified?: Maybe<Boolean>;
  verified_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export type SpecializationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpsertWithWhereUniqueWithoutAccount_typeInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutAccount_typeDataInput;
  create: UserCreateWithoutAccount_typeInput;
}

export interface UserUpsertWithWhereUniqueWithoutDoctorsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutDoctorsDataInput;
  create: UserCreateWithoutDoctorsInput;
}

export interface UserUpdateManyDataInput {
  firebase_id?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  gender?: Maybe<String>;
  photoURL?: Maybe<String>;
  verified?: Maybe<Boolean>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface ChatRoomUpdateInput {
  recipients?: Maybe<UserUpdateManyWithoutChatRoomsInput>;
  content?: Maybe<MessageContentUpdateManyWithoutChatRoomInput>;
}

export type MessageContentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserCreateWithoutDoctorsInput {
  id?: Maybe<ID_Input>;
  firebase_id: String;
  name: String;
  phone: String;
  gender: String;
  photoURL?: Maybe<String>;
  account_type: AccountTypeCreateOneWithoutUsersInput;
  verified?: Maybe<Boolean>;
  specialization?: Maybe<SpecializationCreateOneInput>;
  patients?: Maybe<UserCreateManyWithoutPatientsInput>;
  chatRooms?: Maybe<ChatRoomCreateManyWithoutRecipientsInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  firebase_id: String;
  name: String;
  phone: String;
  gender: String;
  photoURL?: String;
  verified?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firebase_id: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  gender: () => Promise<String>;
  photoURL: () => Promise<String>;
  verified: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firebase_id: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  photoURL: () => Promise<AsyncIterator<String>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateAccountType {
  count: Int;
}

export interface AggregateAccountTypePromise
  extends Promise<AggregateAccountType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccountTypeSubscription
  extends Promise<AsyncIterator<AggregateAccountType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AccountTypeEdge {
  node: AccountType;
  cursor: String;
}

export interface AccountTypeEdgePromise
  extends Promise<AccountTypeEdge>,
    Fragmentable {
  node: <T = AccountTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface AccountTypeEdgeSubscription
  extends Promise<AsyncIterator<AccountTypeEdge>>,
    Fragmentable {
  node: <T = AccountTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  firebase_id: String;
  name: String;
  phone: String;
  gender: String;
  photoURL?: String;
  verified?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firebase_id: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  gender: () => Promise<String>;
  photoURL: () => Promise<String>;
  account_type: <T = AccountTypePromise>() => T;
  verified: () => Promise<Boolean>;
  specialization: <T = SpecializationPromise>() => T;
  doctors: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  patients: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chatRooms: <T = FragmentableArray<ChatRoom>>(args?: {
    where?: ChatRoomWhereInput;
    orderBy?: ChatRoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firebase_id: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  photoURL: () => Promise<AsyncIterator<String>>;
  account_type: <T = AccountTypeSubscription>() => T;
  verified: () => Promise<AsyncIterator<Boolean>>;
  specialization: <T = SpecializationSubscription>() => T;
  doctors: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  patients: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chatRooms: <T = Promise<AsyncIterator<ChatRoomSubscription>>>(args?: {
    where?: ChatRoomWhereInput;
    orderBy?: ChatRoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firebase_id: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  gender: () => Promise<String>;
  photoURL: () => Promise<String>;
  account_type: <T = AccountTypePromise>() => T;
  verified: () => Promise<Boolean>;
  specialization: <T = SpecializationPromise>() => T;
  doctors: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  patients: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chatRooms: <T = FragmentableArray<ChatRoom>>(args?: {
    where?: ChatRoomWhereInput;
    orderBy?: ChatRoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Specialization {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SpecializationPromise
  extends Promise<Specialization>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SpecializationSubscription
  extends Promise<AsyncIterator<Specialization>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SpecializationNullablePromise
  extends Promise<Specialization | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SpecializationSubscriptionPayload {
  mutation: MutationType;
  node: Specialization;
  updatedFields: String[];
  previousValues: SpecializationPreviousValues;
}

export interface SpecializationSubscriptionPayloadPromise
  extends Promise<SpecializationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SpecializationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SpecializationPreviousValuesPromise>() => T;
}

export interface SpecializationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SpecializationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SpecializationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SpecializationPreviousValuesSubscription>() => T;
}

export interface SpecializationPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SpecializationPreviousValuesPromise
  extends Promise<SpecializationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SpecializationPreviousValuesSubscription
  extends Promise<AsyncIterator<SpecializationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AccountTypeConnection {
  pageInfo: PageInfo;
  edges: AccountTypeEdge[];
}

export interface AccountTypeConnectionPromise
  extends Promise<AccountTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AccountTypeEdge>>() => T;
  aggregate: <T = AggregateAccountTypePromise>() => T;
}

export interface AccountTypeConnectionSubscription
  extends Promise<AsyncIterator<AccountTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AccountTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAccountTypeSubscription>() => T;
}

export interface SpecializationEdge {
  node: Specialization;
  cursor: String;
}

export interface SpecializationEdgePromise
  extends Promise<SpecializationEdge>,
    Fragmentable {
  node: <T = SpecializationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SpecializationEdgeSubscription
  extends Promise<AsyncIterator<SpecializationEdge>>,
    Fragmentable {
  node: <T = SpecializationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AccountType {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AccountTypePromise extends Promise<AccountType>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  permissions: <T = FragmentableArray<Permission>>(args?: {
    where?: PermissionWhereInput;
    orderBy?: PermissionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AccountTypeSubscription
  extends Promise<AsyncIterator<AccountType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  permissions: <T = Promise<AsyncIterator<PermissionSubscription>>>(args?: {
    where?: PermissionWhereInput;
    orderBy?: PermissionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AccountTypeNullablePromise
  extends Promise<AccountType | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  permissions: <T = FragmentableArray<Permission>>(args?: {
    where?: PermissionWhereInput;
    orderBy?: PermissionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AccountTypeSubscriptionPayload {
  mutation: MutationType;
  node: AccountType;
  updatedFields: String[];
  previousValues: AccountTypePreviousValues;
}

export interface AccountTypeSubscriptionPayloadPromise
  extends Promise<AccountTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AccountTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AccountTypePreviousValuesPromise>() => T;
}

export interface AccountTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AccountTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AccountTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AccountTypePreviousValuesSubscription>() => T;
}

export interface PermissionEdge {
  node: Permission;
  cursor: String;
}

export interface PermissionEdgePromise
  extends Promise<PermissionEdge>,
    Fragmentable {
  node: <T = PermissionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PermissionEdgeSubscription
  extends Promise<AsyncIterator<PermissionEdge>>,
    Fragmentable {
  node: <T = PermissionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AccountTypePreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AccountTypePreviousValuesPromise
  extends Promise<AccountTypePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AccountTypePreviousValuesSubscription
  extends Promise<AsyncIterator<AccountTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateMessageContent {
  count: Int;
}

export interface AggregateMessageContentPromise
  extends Promise<AggregateMessageContent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageContentSubscription
  extends Promise<AsyncIterator<AggregateMessageContent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Permission {
  id: ID_Output;
  name: String;
  key: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PermissionPromise extends Promise<Permission>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  key: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PermissionSubscription
  extends Promise<AsyncIterator<Permission>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  key: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PermissionNullablePromise
  extends Promise<Permission | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  key: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessageContentConnection {
  pageInfo: PageInfo;
  edges: MessageContentEdge[];
}

export interface MessageContentConnectionPromise
  extends Promise<MessageContentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageContentEdge>>() => T;
  aggregate: <T = AggregateMessageContentPromise>() => T;
}

export interface MessageContentConnectionSubscription
  extends Promise<AsyncIterator<MessageContentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageContentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageContentSubscription>() => T;
}

export interface ChatRoomSubscriptionPayload {
  mutation: MutationType;
  node: ChatRoom;
  updatedFields: String[];
  previousValues: ChatRoomPreviousValues;
}

export interface ChatRoomSubscriptionPayloadPromise
  extends Promise<ChatRoomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChatRoomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChatRoomPreviousValuesPromise>() => T;
}

export interface ChatRoomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChatRoomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChatRoomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChatRoomPreviousValuesSubscription>() => T;
}

export interface ChatRoomEdge {
  node: ChatRoom;
  cursor: String;
}

export interface ChatRoomEdgePromise
  extends Promise<ChatRoomEdge>,
    Fragmentable {
  node: <T = ChatRoomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChatRoomEdgeSubscription
  extends Promise<AsyncIterator<ChatRoomEdge>>,
    Fragmentable {
  node: <T = ChatRoomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChatRoomPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ChatRoomPreviousValuesPromise
  extends Promise<ChatRoomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ChatRoomPreviousValuesSubscription
  extends Promise<AsyncIterator<ChatRoomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MessageContent {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessageContentPromise
  extends Promise<MessageContent>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sender: <T = UserPromise>() => T;
  text: () => Promise<String>;
  chatRoom: <T = ChatRoomPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessageContentSubscription
  extends Promise<AsyncIterator<MessageContent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sender: <T = UserSubscription>() => T;
  text: () => Promise<AsyncIterator<String>>;
  chatRoom: <T = ChatRoomSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageContentNullablePromise
  extends Promise<MessageContent | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sender: <T = UserPromise>() => T;
  text: () => Promise<String>;
  chatRoom: <T = ChatRoomPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SpecializationConnection {
  pageInfo: PageInfo;
  edges: SpecializationEdge[];
}

export interface SpecializationConnectionPromise
  extends Promise<SpecializationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SpecializationEdge>>() => T;
  aggregate: <T = AggregateSpecializationPromise>() => T;
}

export interface SpecializationConnectionSubscription
  extends Promise<AsyncIterator<SpecializationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SpecializationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSpecializationSubscription>() => T;
}

export interface MessageContentSubscriptionPayload {
  mutation: MutationType;
  node: MessageContent;
  updatedFields: String[];
  previousValues: MessageContentPreviousValues;
}

export interface MessageContentSubscriptionPayloadPromise
  extends Promise<MessageContentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessageContentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessageContentPreviousValuesPromise>() => T;
}

export interface MessageContentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageContentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageContentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessageContentPreviousValuesSubscription>() => T;
}

export interface PermissionConnection {
  pageInfo: PageInfo;
  edges: PermissionEdge[];
}

export interface PermissionConnectionPromise
  extends Promise<PermissionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PermissionEdge>>() => T;
  aggregate: <T = AggregatePermissionPromise>() => T;
}

export interface PermissionConnectionSubscription
  extends Promise<AsyncIterator<PermissionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PermissionEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePermissionSubscription>() => T;
}

export interface AggregateChatRoom {
  count: Int;
}

export interface AggregateChatRoomPromise
  extends Promise<AggregateChatRoom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChatRoomSubscription
  extends Promise<AsyncIterator<AggregateChatRoom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PermissionPreviousValues {
  id: ID_Output;
  name: String;
  key: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PermissionPreviousValuesPromise
  extends Promise<PermissionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  key: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PermissionPreviousValuesSubscription
  extends Promise<AsyncIterator<PermissionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  key: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PermissionSubscriptionPayload {
  mutation: MutationType;
  node: Permission;
  updatedFields: String[];
  previousValues: PermissionPreviousValues;
}

export interface PermissionSubscriptionPayloadPromise
  extends Promise<PermissionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PermissionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PermissionPreviousValuesPromise>() => T;
}

export interface PermissionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PermissionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PermissionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PermissionPreviousValuesSubscription>() => T;
}

export interface ChatRoom {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ChatRoomPromise extends Promise<ChatRoom>, Fragmentable {
  id: () => Promise<ID_Output>;
  recipients: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  content: <T = FragmentableArray<MessageContent>>(args?: {
    where?: MessageContentWhereInput;
    orderBy?: MessageContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ChatRoomSubscription
  extends Promise<AsyncIterator<ChatRoom>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  recipients: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  content: <T = Promise<AsyncIterator<MessageContentSubscription>>>(args?: {
    where?: MessageContentWhereInput;
    orderBy?: MessageContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ChatRoomNullablePromise
  extends Promise<ChatRoom | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  recipients: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  content: <T = FragmentableArray<MessageContent>>(args?: {
    where?: MessageContentWhereInput;
    orderBy?: MessageContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessageContentPreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessageContentPreviousValuesPromise
  extends Promise<MessageContentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessageContentPreviousValuesSubscription
  extends Promise<AsyncIterator<MessageContentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ChatRoomConnection {
  pageInfo: PageInfo;
  edges: ChatRoomEdge[];
}

export interface ChatRoomConnectionPromise
  extends Promise<ChatRoomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChatRoomEdge>>() => T;
  aggregate: <T = AggregateChatRoomPromise>() => T;
}

export interface ChatRoomConnectionSubscription
  extends Promise<AsyncIterator<ChatRoomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChatRoomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChatRoomSubscription>() => T;
}

export interface MessageContentEdge {
  node: MessageContent;
  cursor: String;
}

export interface MessageContentEdgePromise
  extends Promise<MessageContentEdge>,
    Fragmentable {
  node: <T = MessageContentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageContentEdgeSubscription
  extends Promise<AsyncIterator<MessageContentEdge>>,
    Fragmentable {
  node: <T = MessageContentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePermission {
  count: Int;
}

export interface AggregatePermissionPromise
  extends Promise<AggregatePermission>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePermissionSubscription
  extends Promise<AsyncIterator<AggregatePermission>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateSpecialization {
  count: Int;
}

export interface AggregateSpecializationPromise
  extends Promise<AggregateSpecialization>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSpecializationSubscription
  extends Promise<AsyncIterator<AggregateSpecialization>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "AccountType",
    embedded: false
  },
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "Specialization",
    embedded: false
  },
  {
    name: "ChatRoom",
    embedded: false
  },
  {
    name: "MessageContent",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
